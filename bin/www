#!/usr/bin/env node

/**
 * Module dependencies.
 */

var crypto = require( 'crypto' );
var app = require('../server/server.js');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || normalizePort('3000');
app.set('port', port);

/**
 * Create HTTP server.
 * Create Socket Io
 */

var server = http.createServer(app);
var io = require( 'socket.io' )( server );

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log( 'Listening on ' + bind + '\n' )
}


// Hash function
function hash256( word ) {
    var hash = crypto.createHash( 'sha256' );
    hash.update( word + 'amazingDisplayOfSkill,withTheGreatestOfEase' );
    return hash.digest( 'hex' );
}

// Object to store the most recent EditorState of each Document
  // The keys are hashed Document Id's
  /**
    documentList: {
      docId: {
        mainUser: String ( socket id ),
        title: String,
        content: editorState rawContent,
        selectionObj: {
          color(rgb): selectionState
        }
      }
    }
  */
var documentList = {};
// Array of User Cursor and Highlight colors
var userColorArray = [
    "#99ffcc",  // blue
    "#ff9933",  // orange
    "#cc99ff",  // purple
    "#99ff66",  // green
    "#ff9999",  // pink
];
// Array to indicate which colors are taken
var takenColorArray = [ false, false, false, false, false ];
// Helper Function to choose the next untaken Color
function nextColor() {
    for( var i = 0; i < takenColorArray.length; i++ ) {
        if( !takenColorArray[i] ) {
            takenColorArray[i] = true;
            return userColorArray[i];
        }
    }
}
// Helper Function to clear a color
function clearColorSelection( color ) {
    for( var i = 0; i < userColorArray.length; i++ ) {
        if( color === userColorArray[i] ) {
            takenColorArray[i] = false;
            return;
        }
    }
}
function clearAllColorSelections() {
    takenColorArray = [ false, false, false, false, false ];
}

// Interval variable and functions to handle Autosaving
var autosaveInterval;
function startAutoSave( io, socketId ) {
    // Autosave every interval while there is a User in the Document's room
      // Default time interval: 30 seconds
    stopAutoSave();
    autosaveInterval = setInterval( () => {
        io.to( socketId ).emit( 'autosave' );
    }, 1000*30 );
}
function stopAutoSave() {
    if( autosaveInterval ) clearInterval( autosaveInterval );
}

/** Socket Io events **/
io.on( 'connection', function( socket ) {
    // When a User opens a Document, the User joins a room associated with that Document's Id
      // data: { userId, docId, title }
    socket.on( 'openDoc', function( data, callback ) {
        var dataId = hash256( data.docId );
        io.in( dataId ).clients( ( clientFindError, clientArray ) => {
            if( clientFindError ) return console.log( "Client Find Error:", clientFindError );
            if( clientArray.length >= 5 ) return callback( { error: "Document room is full." } );
            var selectedColor = nextColor();
            var responseData = {
                token: data.userId,
                color: selectedColor,
                title: data.title
            };
            // If there is someone already editing the Document,
              // Give the new User the Document data
            if( documentList[ dataId ] ) {
                responseData.content = documentList[ dataId ].content || {};
                responseData.selectionObj = documentList[ dataId ].selectionObj || {};
            }
            else {
                // If the user is the first one to open the document,
                  // Tell the user to fetch data from the Database
                  // Start the Autosave for that Document
                responseData.content = "fetch";
                documentList[ dataId ] = { mainUser: socket.id };
                startAutoSave( io, socket.id );
            }
            // responseData: { token, content, title, color, selectionObj }
              // selectionObj is each User's current selectionStates
            callback( responseData );
            socket.join( dataId );
        });
    });

    // When a user edits a Document, the User broadcasts an event to all other Users in that Document's room
      // data: { content, token, docId, title, userColor, selectionObj }
    socket.on( 'editDoc', function( data ) {
        var dataId = hash256( data.docId );
        if( !documentList[ dataId ] ) documentList[ dataId ] = {};
        documentList[ dataId ].content = data.content;
        if( !documentList[ dataId ].selectionObj ) documentList[ dataId ].selectionObj = {};
        documentList[ dataId ].selectionObj = data.selectionObj;
        responseData = {
            content: data.content,
            token: data.token,
            title: data.title,
            selectionObj: documentList[ dataId ].selectionObj
        };
        socket.to( dataId ).emit( 'updateDoc', responseData )
    });

    // When a user closes a Document, the User leaves that Document's room
    // The selectionState for that User's color is also cleared
      // data: { docId, userColor }
    socket.on( 'closeDoc', function( data ) {
        var dataId = hash256( data.docId );
        socket.leave( dataId );
        clearColorSelection( data.userColor );
        if( documentList[ dataId ] && documentList[ dataId ].selectionObj && documentList[ dataId ].selectionObj[ data.userColor ] ) {
            delete documentList[ dataId ].selectionObj[ data.userColor ];
        }
        io.in( dataId ).clients( ( clientFindError, clientArray ) => {
            if( clientFindError ) return console.log( "Client Find Error:", clientFindError );
            if( socket.id === documentList[ dataId ].mainUser ) {
                startAutoSave( io, clientArray[0] );
            }
            if( clientArray.length === 0 ) {
                stopAutoSave();
                clearAllColorSelections();
                documentList[ dataId ] = null;
            }
        });
    });

    // When a user Edits a Document's title, the server's saved Document title is updated, and every other user is told to update their title
      // data: { docId, title }
    socket.on( 'editTitle', function( data ) {
        var dataId = hash256( data.docId );
        if( !documentList[ dataId ] ) documentList[ dataId ] = {};
        documentList[ dataId ].title = data.title;
        responseData = {
            title: data.title
        };
        socket.to( dataId ).emit( 'updateTitle', responseData );
    });
});
